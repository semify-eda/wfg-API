Index: docs/PythonAPI - Design Specifications.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docs/PythonAPI - Design Specifications.md b/docs/PythonAPI - Design Specifications.md
new file mode 100644
--- /dev/null	(date 1697636662563)
+++ b/docs/PythonAPI - Design Specifications.md	(date 1697636662563)
@@ -0,0 +1,10 @@
+# Python API Functionalities and Requirements
+This API was designed to simplify the SmartWave debugging and verification. It accesses the onboard FPGA's control 
+registers, executing erase, read, write, and CRC operations while maintaining the ability to modify control registers 
+without affecting the RTL.
+
+The API should follow the WebGUI Communication protocol as outlined here: 
+https://github.com/semify-eda/wfg-webgui/blob/main/doc/WebGUI-Arduino-protocol.md 
+
+## Basic functionalities
+
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># SmartWave Debugging Python API\r\n\r\nThis Python API is designed to simplify the process of debugging the SmartWave FPGA by offering features for \r\ntesting and analyzing the SmartWave's performance.\r\n\r\n## Requirements\r\n\r\nTo get started with this API, please ensure you follow these requirements:\r\n\r\n1. **IDE Selection:** \r\nI recommend using PyCharm as your IDE for this project. \r\nPyCharm offers seamless integration with GitHub repositories, making version control and \r\ncollaboration a lot easier. If you are new to PyCharm or need assistance setting it up with GitHub, \r\nyou can refer to this helpful guide: \r\n[How to Manage Projects Hosted on GitHub with PyCharm](https://www.jetbrains.com/help/pycharm/manage-projects-hosted-on-github.html#clone-from-GitHub).\r\n\r\n   If you are having issues psuhing back to your remote branch, go to \r\n`File -> Settings -> Version Control -> Git` and at the bottom, tick the **User credential helper**  \r\n\r\n\r\n2. **Virtual Environment Setup:** \r\nIt's essential to configure your virtual environment correctly within PyCharm. \r\nYou can do this when starting a new project or by navigating to \r\n`File -> Settings -> Project -> Project Interpreter`. \r\nI recommend using Python 3.11 as the current version of Python 3.12 has a known bug that may \r\ncause issues during package installations.\r\n\r\n\r\n3. **Install Python Packages:** \r\nOnce your virtual environment is set up, make sure to install all the required Python packages listed in the \r\n`requirements.txt` file. You can easily achieve this by running the following command in your terminal:\r\n\r\n   ```bash\r\n   pip install -r requirements.txt\r\n   ```\r\n\r\n4. **Formatting:**\r\nFollow the PEP-8 guidelines for code readability and consistency. Maintaining a consistent style across branches is \r\nessential.\r\nPrior to merging your branch back to the master, make sure your code is free from **mypy** and **pylint** errors. This helps \r\nmaintain code quality and correctness.\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 203734c427c0886165fd4b8eab376dcb2d3edb11)
+++ b/README.md	(date 1697637495531)
@@ -1,9 +1,9 @@
-# SmartWave Debugging Python API
+## Python work environment setup
 
-This Python API is designed to simplify the process of debugging the SmartWave FPGA by offering features for 
-testing and analyzing the SmartWave's performance.
+_For the API specific funcionalities and requirements, please refer to the Design Specification document._
 
-## Requirements
+
+### Requirements
 
 To get started with this API, please ensure you follow these requirements:
 
Index: coms_test/test_coms.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\r\nInitial test script of the SmartWave debugging API\r\n\r\nEngineer: Adam Horvath\r\n\"\"\"\r\nimport os\r\nimport pandas as pd\r\nimport numpy as np\r\nimport pytest\r\nimport logging\r\nimport time\r\n\r\nfrom Arduino import Arduino\r\n\r\n\r\nclass TestRegComs:\r\n    \"\"\"\r\n    Base Class for testing register access\r\n    \"\"\"\r\n\r\n    def test_arduino_coms(self):\r\n        \"\"\"\r\n        This method is only intended to test the communications with an Arduino, by toggling its LED\r\n        :return: none\r\n        \"\"\"\r\n        logger = logging.getLogger('test_arduino_coms')\r\n        logger.info(\"Setup communication to Arduino MKR Vidor 4000\")\r\n        board = Arduino('9600', port=\"COM12\")\r\n        logger.info(\"Connection was successful\")\r\n        board.pinMode(9, \"OUTPUT\")\r\n\r\n        for _ in range(10):\r\n            logger.info(\"LED TOGGLE\")\r\n            board.digitalWrite(9, \"LOW\")\r\n            time.sleep(1)\r\n            board.digitalWrite(9, \"HIGH\")\r\n            time.sleep(1)\r\n\r\n        logger.info(\"Arduino coms test finished\")\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/coms_test/test_coms.py b/coms_test/test_coms.py
--- a/coms_test/test_coms.py	(revision 203734c427c0886165fd4b8eab376dcb2d3edb11)
+++ b/coms_test/test_coms.py	(date 1697635164902)
@@ -18,6 +18,7 @@
     Base Class for testing register access
     """
 
+    @pytest.mark.skip
     def test_arduino_coms(self):
         """
         This method is only intended to test the communications with an Arduino, by toggling its LED
@@ -38,4 +39,7 @@
 
         logger.info("Arduino coms test finished")
 
+    def test_communication_protocol(self):
+        pass
+
 
